import musicData from './music_data.json';

const sort = [118, 16, 730, 553, 11, 1101, 362, 1333, 987, 62, 530, 854, 725, 1597, 1358, 1676, 101, 45, 1195, 78, 1549, 866, 844, 1060, 1444, 115, 152, 832, 1720, 1380, 531, 606, 1174, 1126, 503, 695, 1292, 1116, 1090, 1710, 980, 1050, 15, 989, 680, 1166, 1091, 981, 676, 1271, 379, 218, 1254, 855, 1783, 53, 471, 403, 550, 1258, 328, 1490, 497, 1625, 834, 1587, 1741, 1018, 378, 303, 903, 1758, 1214, 191, 264, 839, 1635, 1360, 595, 792, 1742, 1022, 907, 1112, 846, 1246, 893, 1657, 1023, 261, 1071, 841, 1068, 363, 926, 769, 639, 1699, 729, 563, 1381, 255, 1522, 147, 1632, 1370, 448, 1335, 1667, 207, 708, 1729, 1151, 1567, 1507, 498, 360, 291, 1415, 620, 515, 258, 1129, 418, 1668, 1326, 271, 1164, 1163, 235, 247, 579, 1302, 304, 405, 991, 605, 1768, 257, 342, 896, 982, 153, 1435, 1678, 1079, 1276, 506, 80, 1455, 1548, 187, 436, 677, 372, 528, 1123, 604, 185, 484, 544, 1290, 796, 654, 96, 1034, 265, 1721, 941, 1375, 580, 1715, 1416, 1314, 98, 231, 455, 886, 297, 1728, 813, 1465, 1336, 317, 1221, 935, 1274, 1556, 1420, 541, 472, 1489, 812, 1310, 916, 454, 573, 324, 785, 726, 100, 467, 443, 1134, 845, 424, 1059, 1606, 1318, 1118, 1447, 18, 915, 1437, 470, 446, 61, 1764, 1309, 1311, 238, 1539, 256, 1643, 831, 213, 1791, 461, 1084, 489, 1359, 155, 1140, 40, 212, 42, 1058, 1560, 1217, 924, 838, 1408, 1280, 667, 685, 889, 391, 1369, 1662, 881, 587, 996, 773, 692, 719, 1686, 1225, 1266, 637, 63, 180, 1329, 547, 1798, 774, 278, 744, 340, 600, 1149, 687, 1291, 1244, 1414, 1534, 1564, 1671, 1153, 706, 1411, 453, 818, 1574, 586, 387, 904, 1661, 327, 190, 613, 1074, 961, 756, 408, 691, 1493, 35, 310, 1183, 1161, 321, 128, 1245, 724, 843, 214, 351, 973, 277, 693, 1009, 1384, 143, 4, 1563, 1558, 1227, 1156, 882, 272, 1362, 131, 925, 967, 1102, 1039, 244, 273, 928, 452, 848, 425, 590, 593, 394, 551, 1512, 163, 788, 837, 1158, 65, 102, 1382, 1659, 1637, 861, 966, 268, 699, 588, 1642, 1186, 263, 95, 504, 535, 1293, 585, 558, 874, 1795, 1067, 977, 739, 1201, 389, 1344, 1735, 577, 1733, 201, 184, 289, 565, 350, 1312, 652, 419, 1693, 662, 1726, 1456, 1542, 1162, 211, 930, 1052, 1042, 806, 945, 1036, 1474, 865, 1624, 316, 224, 259, 872, 784, 1607, 616, 1168, 810, 1706, 1756, 610, 1299, 60, 1788, 1035, 174, 1770, 1405, 932, 396, 1684, 1577, 1147, 395, 868, 1339, 545, 584, 352, 183, 1387, 1047, 950, 1628, 1672, 880, 148, 1502, 735, 1515, 165, 206, 1452, 56, 1509, 1530, 1379, 1087, 1419, 1076, 487, 1367, 1427, 660, 478, 1552, 1251, 167, 999, 239, 723, 1159, 1229, 1614, 346, 1103, 1073, 74, 1681, 1457, 1157, 826, 628, 1398, 1352, 1323, 712, 1322, 468, 1753, 948, 1669, 650, 727, 1469, 630, 1697, 856, 575, 1749, 1099, 1008, 1422, 1722, 75, 464, 1003, 1603, 409, 1365, 1547, 295, 1557, 1583, 1223, 116, 10, 1146, 1467, 666, 1200, 1463, 717, 1204, 906, 1255, 1037, 296, 209, 1448, 195, 1579, 182, 1428, 1520, 811, 963, 381, 548, 44, 1744, 1578, 1388, 1027, 485, 634, 1629, 1696, 1006, 1285, 202, 1559, 804, 694, 887, 598, 1347, 376, 226, 222, 1666, 368, 49, 745, 1451, 417, 12, 371, 284, 901, 14, 1187, 146, 1703, 701, 782, 1007, 956, 356, 126, 1115, 521, 1751, 655, 1613, 1097, 555, 883, 1119, 1541, 434, 133, 853, 899, 460, 1485, 1298, 8, 31, 440, 777, 1235, 1506, 178, 819, 629, 1464, 323, 1033, 413, 992, 142, 1519, 1053, 192, 162, 1698, 596, 1766, 1602, 934, 145, 1664, 1426, 123, 91, 1449, 392, 359, 653, 510, 1320, 1652, 373, 114, 106, 172, 169, 927, 1417, 1596, 951, 1020, 921, 1249, 1372, 1279, 560, 1776, 827, 383, 624, 1771, 664, 1594, 1281, 715, 1253, 878, 103, 451, 1330, 445, 929, 949, 1424, 293, 625, 1688, 240, 1670, 627, 1623, 1136, 762, 892, 958, 1086, 250, 79, 186, 1633, 117, 57, 873, 1243, 914, 50, 1767, 1165, 943, 1196, 1247, 1095, 1581, 1300, 1150, 32, 569, 125, 1400, 1277, 867, 1565, 1001, 602, 507, 1328, 1113, 1450, 764, 554, 1442, 19, 1256, 341, 1499, 1755, 572, 1045, 1712, 1363, 857, 1046, 1640, 1355, 909, 1790, 466, 962, 1434, 814, 1109, 1132, 1378, 534, 824, 919, 1592, 1185, 348, 975, 1540, 438, 1385, 495, 130, 1772, 615, 954, 642, 1793, 754, 248, 1160, 86, 1202, 1284, 1537, 26, 1111, 447, 702, 1011, 960, 283, 344, 6, 760, 161, 716, 1188, 751, 768, 690, 1203, 1536, 1248, 1127, 58, 1716, 1044, 645, 897, 1760, 1093, 783, 68, 802, 1777, 938, 1571, 607, 229, 1236, 684, 168, 1377, 1324, 743, 1141, 793, 382, 1092, 1306, 847, 1125, 765, 1787, 1473, 1586, 1025, 1636, 401, 1325, 1521, 275, 1143, 805, 731, 1761, 1527, 614, 647, 1483, 84, 597, 599, 20, 1228, 220, 1436, 380, 636, 411, 1645, 721, 799, 1189, 33, 779, 1638, 193, 520, 900, 860, 1796, 1570, 668, 1604, 1194, 1257, 1144, 1169, 1622, 1019, 1618, 603, 1088, 72, 119, 990, 1403, 633, 830, 1648, 48, 672, 1658, 1707, 574, 479, 1173, 781, 21, 1346, 320, 158, 790, 737, 1517, 1054, 390, 270, 656, 141, 511, 1446, 993, 608, 1730, 1719, 862, 1679, 1096, 164, 1441, 1650, 659, 217, 869, 269, 1130, 1396, 618, 875, 428, 538, 1089, 1518, 1331, 334, 160, 140, 70, 984, 1651, 1373, 431, 491, 1409, 412, 1609, 459, 1061, 884, 681, 71, 246, 1723, 710, 30, 473, 525, 249, 1083, 1589, 1588, 299, 1544, 501, 393, 325, 34, 1430, 797, 619, 918, 711, 242, 995, 1786, 407, 308, 516, 800, 73, 1397, 502, 176, 156, 1205, 415, 970, 643, 682, 821, 1371, 1792, 825, 1423, 266, 1238, 1265, 1655, 1617, 87, 1273, 108, 1110, 314, 69, 188, 601, 205, 225, 1004, 1500, 1511, 1176, 1233, 492, 1731, 1800, 1665, 646, 747, 540, 1674, 1526, 1595, 688, 1175, 457, 994, 976, 1337, 245, 663, 675, 228, 64, 798, 28, 657, 25, 1682, 99, 757, 863, 828, 1230, 1566, 741, 107, 704, 137, 1404, 1401, 427, 1350, 173, 1107, 227, 513, 1460, 1179, 971, 1351, 1394, 1209, 974, 748, 594, 1242, 622, 1315, 157, 1545, 1471, 817, 1002, 888, 641, 508, 1470, 533, 177, 683, 836, 1528, 931, 1440, 1496, 1745, 1015, 1138, 933, 55, 1334, 509, 1301, 1421, 1152, 877, 937, 112, 696, 83, 120, 1288, 370, 879, 121, 435, 632, 1282, 1573, 942, 1192, 944, 920, 144, 1747, 576, 181, 1043, 1612, 1297, 288, 375, 728, 1219, 1508, 746, 522, 669, 1207, 1701, 532, 542, 482, 175, 463, 1479, 1580, 1063, 1774, 138, 749, 441, 1634, 82, 1561, 1598, 1523, 496, 1660, 1481, 200, 298, 820, 1725, 923, 1072, 1689, 329, 1286, 1491, 1406, 795, 377, 1038, 1234, 402, 1410, 1472, 686, 1425, 1407, 997, 1135, 833, 947, 1782, 481, 1433, 416, 219, 292, 546, 1488, 5, 27, 397, 1538, 7, 1211, 1210, 1180, 1546, 67, 780, 1501, 543, 965, 1016, 406, 803, 430, 952, 1062, 1056, 829, 1601, 1685, 1462, 280, 526, 1021, 1240, 1575, 1531, 1190, 420, 1208, 477, 149, 1714, 1705, 1197, 1687, 43, 59, 1104, 109, 939, 1739, 1275, 483, 1524, 673, 1757, 1476, 1013, 842, 1631, 29, 1296, 986, 807, 251, 1692, 1785, 203, 1260, 1354, 876, 517, 968, 953, 1695, 1343, 432, 9, 514, 1431, 307, 465, 568, 1514, 707, 355, 959, 1055, 81, 732, 237, 623, 89, 1461, 322, 1569, 122, 1014, 709, 1438, 1237, 456, 22, 1732, 336, 1591, 1069, 90, 1041, 41, 92, 564, 556, 1278, 458, 1694, 734, 189, 1081, 433, 1555, 905, 917, 46, 1535, 1700, 1459, 700, 549, 1769, 233, 648, 23, 290, 908, 1630, 349, 1226, 539, 946, 858, 1030, 313, 1443, 54, 1773, 208, 232, 1713, 1122, 1750, 1482, 679, 1626, 450, 1718, 1206, 1269, 1338, 911, 738, 518, 1582, 523, 1139, 816, 1145, 913, 1064, 1321, 488, 661, 670, 755, 758, 353, 354, 1078, 1504, 852, 331, 1193, 979, 1167, 1680, 1413, 1349, 1199, 385, 562, 766, 36, 1429, 583, 139, 88, 1, 1627, 1303, 1494, 150, 366, 1738, 1289, 171, 1105, 132, 527, 651, 398, 1759, 1554, 221, 988, 1525, 1656, 1308, 260, 1005, 1644, 241, 823, 1259, 1412, 1743, 1356, 1051, 1262, 640, 1182, 1012, 111, 166, 1646, 1553, 1304, 1516, 358, 462, 39, 1752, 1057, 870, 1032, 775, 1215, 1049, 1466, 127, 1572, 1778, 1287, 330, 85, 809, 791, 135, 286, 281, 1779, 1261, 198, 129, 1393, 1775, 469, 1477, 287, 1458, 612, 230, 276, 1218, 1224, 318, 772, 1294, 644, 1585, 752, 1641, 285, 267, 76, 236, 589, 713, 345, 1647, 399, 972, 1270, 1639, 1486, 753, 1711, 1124, 890, 1178, 1341, 475, 1171, 1048, 1390, 1252, 197, 1740, 357, 561, 1117, 1475, 210, 1085, 1503, 524, 254, 1704, 1155, 1106, 635, 1198, 47, 282, 369, 305, 1094, 776, 1386, 17, 698, 1763, 1029, 1082, 134, 110, 1040, 631, 500, 170, 536, 1028, 1445, 400, 898, 1717, 474, 234, 1510, 609, 767, 309, 301, 1727, 326, 1133, 761, 338, 215, 1031, 1108, 1789, 66, 922, 1734, 1148, 835, 423, 404, 13, 789, 678, 512, 998, 1342, 1357, 1590, 1000, 490, 722, 1353, 374, 567, 578, 1272, 969, 410, 1653, 442, 770, 1075, 486, 822, 1154, 1690, 936, 1383, 705, 449, 582, 421, 1100, 0, 1780, 759, 38, 1222, 1391, 3, 894, 1576, 1080, 1295, 591, 1070, 1543, 689, 1550, 1241, 1418, 1077, 154, 1366, 429, 1389, 895, 1263, 1283, 24, 216, 851, 1268, 1611, 1361, 1316, 1340, 300, 1478, 294, 279, 617, 801, 1142, 1480, 1184, 902, 742, 204, 1584, 1532, 1453, 571, 703, 179, 337, 194, 1402, 1593, 480, 850, 113, 104, 315, 736, 1615, 414, 864, 720, 1170, 1231, 1065, 1024, 365, 97, 519, 1654, 343, 1348, 658, 499, 505, 1313, 124, 1568, 1392, 910, 1748, 1498, 243, 1374, 750, 815, 1621, 1317, 1551, 274, 1799, 332, 1220, 1177, 1250, 983, 426, 1267, 2, 437, 1137, 1781, 771, 1620, 1562, 592, 306, 1746, 859, 302, 159, 422, 1264, 1709, 1754, 1675, 151, 1232, 1619, 1216, 1765, 1616, 940, 1683, 1797, 386, 985, 1468, 885, 199, 105, 1432, 388, 1327, 621, 361, 1784, 1794, 252, 740, 1497, 1702, 1376, 1610, 1364, 674, 1513, 1172, 1131, 1495, 51, 1399, 1673, 37, 1677, 1454, 570, 1332, 1026, 335, 786, 1098, 1736, 1305, 955, 1439, 1114, 1599, 552, 94, 1128, 347, 333, 1708, 964, 319, 494, 794, 1181, 1608, 1492, 1505, 978, 1529, 384, 1600, 1066, 1010, 649, 733, 1212, 671, 891, 136, 714, 537, 718, 808, 1649, 476, 439, 1605, 1120, 559, 638, 1533, 444, 364, 93, 566, 1121, 262, 52, 1319, 778, 1307, 1487, 312, 763, 1191, 787, 1724, 253, 912, 311, 493, 697, 665, 1484, 611, 1345, 581, 1017, 1239, 557, 367, 957, 196, 871, 849, 626, 223, 840, 1663, 1762, 1737, 1395, 1213, 1691, 77, 339, 1368, 529]


export default async function handler(req, res) {

    //month is 0 indexed, 0 = jan, 11 = dec etc
    const startDate = new Date(2023, 6, 1);
    // const test = new Date(2024, 4, 1);

    let today = new Date();
    today.setHours(0,0,0,0);



    const hours = Math.floor(((today - startDate) / 1000 / 60 / 60));
    // console.log(test - startDate); //gives result in MS
    // To calculate the time difference of two dates
    var Difference_In_Time = today - startDate;

    // To calculate the no. of days between two dates
    //this will give us the index of our array to pick which song is used for the day
    var Difference_In_Days = Math.floor(Difference_In_Time / (1000 * 3600 * 24));

    let songInfo = musicData[sort[Difference_In_Days]];


   


    let json = {
        song_date: today,
        song_name: songInfo.Track_Name,
        artist_name: songInfo.Artist_Name,
        album_image_url: songInfo.Album_Image_URL,
        song_prev_url: songInfo.Track_Preview_URL,
        lyrics: await fetchMusic(songInfo.Track_Name, songInfo.Artist_Name),
        lyrics_disp:  "hold",
        lyrics_answer:"hold"
    }

    let lyricAns = trimLyrics(json.lyrics);

   json.lyrics_disp = lyricAns.disp;
   json.lyrics_answer = lyricAns.ans;

    res.status(200).json({ data: json });
}


//1 d = 86,400,000 ms
//1 d = 86,400 s


async function fetchMusic(songName, artistName) {

    const response = await fetch(`http://api.musixmatch.com/ws/1.1/matcher.lyrics.get?q_track=${songName}&q_artist=${artistName}&apikey=${process.env.MUSIXMATCH_CLIENT_ID}`, {
        method: "GET",
    }
    );


    const lyric = await response.json();

    return (lyric.message.body.lyrics.lyrics_body);

}

/**
 * Takes the lyrics from API call and selects the first two lines that will be used for the game
 * Two lines must be in a verse longer than 2 lines and must not be the same
 * if these two conditions are not met then the next verse is picked
 * 
 * @param {*} lyrics 
 * @returns An objext with the two lines of lyrics that will be used. disp is the display lyric ans is the answer
 */
export function trimLyrics(lyrics) {

    //get all verses in the lyrics and place into an array
    let verses = lyrics.split("\n\n");

    // console.log(verses);


    //gets the first verse of the lyrics
    let verseIndex = 0;
    let chosenVerse = verses[verseIndex];

    //gets all the lines of the initial verse
    let lines = chosenVerse.split('\n');

    while (lines.length < 2 || lines[0] === lines[1] || lines[1][1] === '(' || !(/\s/.test(lines[0])) || (lines[0].includes("Tay Keith") || lines[1].includes("Tay Keith") || lines[0].includes("Another one"))) {
        //gets new verse if two conditions are not met
        chosenVerse = verses[verseIndex++];
        lines = chosenVerse.split('\n');
    }

    let disp = lines[0];
    let ans = lines[1];

    return({disp, ans});

}
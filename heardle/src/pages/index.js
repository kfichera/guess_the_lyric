import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useSession } from 'next-auth/react'
import { useState, useEffect } from 'react'
import musicData from '../../../heardle/muisc.json';


const inter = Inter({ subsets: ['latin'] })

const baseUrl = "https://api.musixmatch.com/ws/1.1/"
const eststs = `artist.search?q_artist=neighborhood&page_size=5&apikey=${process.env.MUSIXMATCH_CLIENT_ID}`

const apiKey = process.env.MUSIXMATCH_CLIENT_ID

export default function Home() {

  const [filteredData, setFilteredData] = useState(musicData);
  //   for (let i = 0; i < data.length; i++){

  // console.log(data[i].Track_Name + ", by " + data[i].Artist_Name + "");
  // }
  //  access session information
  const { data: session } = useSession();
  //  console.log(session.accessToken);
  const [topArtists, setTopArtists] = useState([]);
  const [lyrics, setLyrics] = useState('');
  const [random, setRandom] = useState(0);
  const [search, setSearch] = useState('');

  function randomNumberInRange(min, max) {
    // 👇️ get number between min (inclusive) and max (inclusive)
    return Math.floor(Math.random() * (musicData.length - 0 + 1)) + 0;
  }

  const handleClick = () => {
    setRandom(randomNumberInRange(1, 5));
  };

  const handleSearch = (event) => {
    let value = event.target.value.toLowerCase();
    let result = [];
    // console.log(value);
    result = musicData.filter((data) => {
       console.log(data);
      return data.Artist_Name.toLowerCase().search(value) != -1;
    });
    setFilteredData(result);
  }


  // console.log(musicData[0].Track_Name);


  const song = musicData[random]

  useEffect(() => {
    if (session && session.accessToken) {

      setRandom(Math.floor(Math.random() * (musicData.length - 0 + 1)) + 0);

      //calls the api through the server, path: api/hello.js
      const getLyrics = async () => {
        const response = await fetch("/api/hello", {
          method: "GET"
        });
        const json = await response.json();
        console.log(json);
      }

      // getLyrics();

      

      const fetchData = async () => {
        const response = await fetch("https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=0", {
          method: "GET", headers: { Authorization: `Bearer ${session.accessToken}` }
        });
        const json = await response.json();
        // setTopArtists(json.items);
      };
      // fetchData();
      // fetchMusic();
    }
  }, [session]);






  return (
    <>
      {/* <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}
      <main className={`${styles.main} ${inter.className}`}>
        {/* hello {session.user.name} */}
        {/* <div>
          top artists:
          {topArtists.map((item) => (
            <div key={item.id}>{item.name}</div>
          ))}
        </div> */}
        <div>
          Lyrics for song: {song.Track_Name} by {song.Artist_Name}
        </div>
        <label>Search:</label>

        <div className="App">
          <div style={{ margin: '0 auto', marginTop: '10%' }}>
            <label>Search:</label>
            <input type="text" onChange={(event) => handleSearch(event)} />
          </div>
          <div style={{ padding: 10 }}>
            {filteredData.map((value, index) => {
              return (
                <div key={value.id}>
                  <div style={styles}>
                    {value.Track_Name} , {value.Artist_Name}
                  </div>
                </div>
              )
            })}
          </div>
        </div>

        <button onClick={handleClick}>new song</button>
      </main>
    </>
  )
}
async function getProfile(token, setId) {
  const profile = await fetchProfile(token);
  setId(profile.id)
  return {
    id: profile.id,
    email: profile.email,
    uri: profile.uri,
  }
}

async function getArtists(token, setArtists) {
  const artists = await fetchTopArtists(token);
  // setArtists(artists);
  console.log(artists.items);
  return artists.items;
}

async function fetchTopArtists(token) {
  const result = await fetch("https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=0", {
    method: "GET", headers: { Authorization: `Bearer ${token}` }
  });
  // console.log(result.object);
  return await result.json();
}


async function fetchProfile(token) {
  const result = await fetch("https://api.spotify.com/v1/me", {
    method: "GET", headers: { Authorization: `Bearer ${token}` }
  });
  return await result.json();
}

import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useSession } from 'next-auth/react'
import { useState, useEffect } from 'react'

import Search from '../../lib/search'
import Lyrics from '../../lib/lyrics'
import Lyric_Guess from '../../lib/lyric_guess'


const inter = Inter({ subsets: ['latin'] })


export default function Home() {

  //   for (let i = 0; i < data.length; i++){

  // console.log(data[i].Track_Name + ", by " + data[i].Artist_Name + "");
  // }
  //  access session information
  const { data: session } = useSession();
  const [random, setRandom] = useState(0);
  const [lyric, setLyrics] = useState('');

  const [x, setX] = useState({
    data: {
      song_date: null,
      song_name: '',
      artist_name: '',
      album_image_url: '',
      song_prev_url: '',
      lyrics: '',
      lyrics_disp: '',
      lyrics_answer: 'hold'
    }
  }
  );


  const [songGuess, setSongGuess] = useState('');

  const searchSet = (data) => {
    console.log("song clicked: " + data);
    setSongGuess(data);
  }


  //song randomly picked

  function randomNumberInRange(min, max) {
    // 👇️ get number between min (inclusive) and max (inclusive)
    return Math.floor(Math.random() * (musicData.length - 0 + 1)) + 0;
  }

  const handleClick = () => {
    setRandom(randomNumberInRange(1, 5));

    const newSong = {
      id: musicData[random].Key,
      name: musicData[random].Track_Name,
      artist: musicData[random].Artist_Name,
    };
    getLyrics(random, setLyrics);

    setSong(newSong);
    // getLyrics(random, setLyrics);
  };



  //runs on startup
  //TODO: change the second param of session
  useEffect(() => {

    //on page load, get from local storage last play time, 



    checkDailyPlay(x, setX);
    {
      // setRandom(Math.floor(Math.random() * (musicData.length - 0 + 1)) + 0);
      // console.log("random num in useEffect: " + random)

      //calls the api through the server, path: api/hello.js




      // const newSong = [{
      //   id: musicData[random].Key,
      //   name: musicData[random].Track_Name,
      //   artist: musicData[random].Artist_Name,
      //   lyrics: getLyrics(random)
      // }];

      // setSong(newSong);
      // console.log(song);

    }

    console.log(x);
    const fetchData = async () => {
      const response = await fetch("https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=0", {
        method: "GET", headers: { Authorization: `Bearer ${session.accessToken}` }
      });
      const json = await response.json();
      // setTopArtists(json.items);
    };
  }, []);

  useEffect(() => {
    let answer = x.data.song_name + ' - ' + x.data.artist_name;
    if (songGuess !== '') {
      if (answer === songGuess) {
        console.log("correct");
      }
      else {
        console.log("wrong");
      }
    }
  }, [songGuess]);

 


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        {/* hello {session.user.name} */}
        <div>
          <Lyrics lyrics={x.data.lyrics_disp} />
        </div>

        {/* <button onClick={handleClick}>new song</button> */}

        {
          <Search />
        }

        <Lyric_Guess/>



      </main>
    </>
  )
}
async function getProfile(token, setId) {
  const profile = await fetchProfile(token);
  setId(profile.id)
  return {
    id: profile.id,
    email: profile.email,
    uri: profile.uri,
  }
}

async function getArtists(token, setArtists) {
  const artists = await fetchTopArtists(token);
  // setArtists(artists);
  console.log(artists.items);
  return artists.items;
}

async function fetchTopArtists(token) {
  const result = await fetch("https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=5&offset=0", {
    method: "GET", headers: { Authorization: `Bearer ${token}` }
  });
  // console.log(result.object);
  return await result.json();
}


/**
 * Returns TRUE if the user can play todays daily
 * Returns FALSE if the user has already played todays daily
 */
function checkDailyPlay(x, setX) {
  //time in (units) since last played, time since last completed
  //get the time in (units) since midnight (when the word was updated)
  //compare time since midnight with time since last played, if last played was LESS THAN time since midnight, 
  //then check if the time in units since last completed is also less than time since midnight


  let today = new Date();
  // today.setHours(0, 0, 0, 0);


  window.localStorage.clear();


  const data = window.localStorage.getItem("GAME_DATA");
  if (data == null) {
    //player has never completed the game, they can play today.
    //first we have to create their data

    /**
     * Fetches the daily song from the server and puts the data into local storage
     * 
     *  TODO: CHANGE TO LOCAL STORAGE. CURRENTLY USING X VARIABLE, NOT LOCAL STORAGE
     * 
     * @returns the daily song information fetched from the server
     *          includes: current date for song, song name, artist name, album image url & clip URL, and lyrics
     */
    console.log("data not in storage");
    const getDaily = async () => {

      const response = await fetch('/api/music/daily', {
        method: "GET"
      });


      const data = await response.json();

      window.localStorage.setItem("GAME_DATA", JSON.stringify(data))

      setX(data);
      return data;
    }

    // call the function
    getDaily();

  }
  else {
    //the data is in local storage and we process it

    //first we have to check if the song in local storage is from today or a past day
    let lastSongDate = JSON.parse(data).data.song_date;


    let difference = (today - Date.parse(lastSongDate));
    console.log(difference);

    if (difference > 0) {
      //this means that the song is from yesterday
      //we need to fetch the new daily and update

      const getDaily = async () => {

        const response = await fetch('/api/music/daily', {
          method: "GET"
        });
  
  
        const data = await response.json();
  
        window.localStorage.setItem("GAME_DATA", JSON.stringify(data))
  
        setX(data);
        return data;
      }
  
      // call the function
      getDaily();

    }



    setX(JSON.parse(window.localStorage.getItem("GAME_DATA")));
  }


  const guessData = window.localStorage.getItem("GUESS_DATA");

  if (guessData != null) {

    let newData = JSON.parse(guessData);

    let lastGuessDate = newData.last_played;


    let difference = (today - Date.parse(lastGuessDate));

    //check if last play was not today
    //if not then we can reset the game status, and guesses

    console.log(newData.last_played);

    if (difference > 0) {

      //we want to reset game_status and guesses
      
      newData.game_status = 'not_started';
      newData.guesses = {
        song_guess_time: null,
        song_name_title: '',
        lyrics: ''
      };



      // let newData = {
      //   last_completed: JSON.parse(guessData).last_completed,
      //   last_played: JSON.parse(guessData).last_played,
      //   game_status: 'not_started',
      //   guesses: {
      //     song_guess_time: null,
      //     song_name_title: '',
      //     lyrics: ''
      //   },
      //   score: {
      //     correct_title_guess: 0,
      //     correct_lyric_guess: 0,
      //     number_of_hints: 0,
      //   }
      // }

      window.localStorage.setItem("GUESS_DATA", JSON.stringify(newData));
    }


  }

  else {
    //there is no data and we need to create the guess data local storage object

    let newData = {
      last_completed: null,
      last_played: null,
      game_status: 'not_started',
      guesses: {
        song_guess_time: null,
        song_name_title: '',
        lyrics: ''
      },
      score: {
        correct_title_guess: 0,
        correct_lyric_guess: 0,
        number_of_hints: 0,
      }
    }

    window.localStorage.setItem("GUESS_DATA", JSON.stringify(newData));
  }
}

async function fetchProfile(token) {
  const result = await fetch("https://api.spotify.com/v1/me", {
    method: "GET", headers: { Authorization: `Bearer ${token}` }
  });
  return await result.json();
}

async function getLyrics(key, set) {
  const response = await fetch(`/api/music/${key}`, {
    method: "GET"
  });
  const json = await response.json();

  set(((json.data.message.body.lyrics.lyrics_body)))

  // console.log(JSON.stringify(json.data.message.body.lyrics.lyrics_body));
}
